---
title: "Predicting Future Sales"
description: ""
author: "Brian Cervantes Alvarez"
date: "06-04-2023"
format:
  html:
    toc: true
    toc-location: right
    html-math-method: katex
    page-layout: full
execute: 
  warning: false
  message: false
categories: [Python, Machine Learning]
jupyter: python3
---


```{python}
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
import xgboost as xgb
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
```

# Data Wrangling
```{python}
reviews  = pd.read_csv('cleaned_games2.csv')
reviews.shape
reviews.drop('Title', axis = 1, inplace = True)
reviews.drop('publishers', axis = 1, inplace = True)
reviews.columns

dummy_cols = ['release_console', 'esrb_rating', 'year']

# Creating dummy columns
reviews = pd.get_dummies(reviews, columns=dummy_cols)

# Handling missing values
reviews.dropna(inplace=True)

```


```{python}

tf.random.set_seed(42)

# Step 1: Preparing the Data
X = reviews.drop('review_score', axis=1)
y = reviews['review_score']  # Target

scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 2: Building the Neural Network Model
model = tf.keras.models.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1)  # Output layer with 1 unit for regression
])

model.compile(loss='mse', optimizer='adam')  # Adjust the loss function and optimizer as needed

# Step 3: Training the Model
model.fit(X_train, y_train, epochs=50, batch_size=32)  # Adjust the number of epochs and batch size as needed

# Step 4: Evaluating and Making Predictions
loss = model.evaluate(X_test, y_test)
predictions = model.predict(X_test)

# Evaluation Metrics
rmse = np.sqrt(mean_squared_error(y_test, predictions))
mae = mean_absolute_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print("Tensorflow Model:")
print("Test Loss (MSE):", loss)
print("RMSE:", rmse)
print("MAE:", mae)
print("R-squared:", r2)
print('')

np.random.seed(42)

# Random Forest Model
rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

rf_predictions = rf_model.predict(X_test)
rf_mse = mean_squared_error(y_test, rf_predictions)
rf_rmse = np.sqrt(rf_mse)
rf_mae = mean_absolute_error(y_test, rf_predictions)
rf_r2 = r2_score(y_test, rf_predictions)

print("Random Forest Model:")
print("MSE:", rf_mse)
print("RMSE:", rf_rmse)
print("MAE:", rf_mae)
print("R-squared:", rf_r2)

# XGBoost Model
xgb_model = xgb.XGBRegressor(random_state=42)
xgb_model.fit(X_train, y_train)

xgb_predictions = xgb_model.predict(X_test)
xgb_mse = mean_squared_error(y_test, xgb_predictions)
xgb_rmse = np.sqrt(xgb_mse)
xgb_mae = mean_absolute_error(y_test, xgb_predictions)
xgb_r2 = r2_score(y_test, xgb_predictions)

print("\nXGBoost Model:")
print("MSE:", xgb_mse)
print("RMSE:", xgb_rmse)
print("MAE:", xgb_mae)
print("R-squared:", xgb_r2)

# Linear Regression Model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

linear_predictions = linear_model.predict(X_test)
linear_mse = mean_squared_error(y_test, linear_predictions)
linear_rmse = np.sqrt(linear_mse)
linear_mae = mean_absolute_error(y_test, linear_predictions)
linear_r2 = r2_score(y_test, linear_predictions)

print("\nLinear Regression Model:")
print("MSE:", linear_mse)
print("RMSE:", linear_rmse)
print("MAE:", linear_mae)
print("R-squared:", linear_r2)



# Logistic Regression Model
logistic_model = LogisticRegression()
logistic_model.fit(X_train, y_train)

logistic_predictions = logistic_model.predict(X_test)
logistic_accuracy = accuracy_score(y_test, logistic_predictions)
logistic_confusion_matrix = confusion_matrix(y_test, logistic_predictions)

print("\nLogistic Regression Model:")
print("Accuracy:", logistic_accuracy)


```