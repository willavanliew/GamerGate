---
title: "Predicting Future Sales"
description: ""
author: "Brian Cervantes Alvarez"
date: "07-03-2023"
format:
  html:
    toc: true
    toc-location: right
    html-math-method: katex
    page-layout: full
execute: 
  warning: false
  message: false
categories: [Python, Machine Learning]
jupyter: python3
---

# Load Libraries
```{python}
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.cluster import KMeans
from kmodes.kmodes import KModes
```

## Data Preprocessing and Analysis

These operations demonstrate common data preprocessing tasks such as reading data, removing columns, handling missing values, creating new columns, converting data types, and performing basic analysis on the data.

```{python}
# Read the CSV file into a DataFrame
games = pd.read_csv("gamesMetacritic.csv")
print(games.shape)

# Find the columns with missing values
columns_with_missing_values = games.columns[games.isna().any()].tolist()

# Print the number of missing values for each column
print("\nNumber of missing values per column:")
for column in columns_with_missing_values:
    missing_count = games[column].isna().sum()
    print(f"{column}: {missing_count}")

# Drop the missing values
games.dropna(inplace=True)

# Define rating ranges and corresponding labels
rating_ranges = [(0, 59, "Poor"),
                 (60, 69, "Mixed"),
                 (70, 79, "Good"),
                 (80, 84, "Great"),
                 (85, 89, "Excellent"),
                 (90, 100, "Masterpiece")]

# Create a new column for the categorical labels
games["metacritic_category"] = pd.cut(games["metacritic"], bins=[r[0] for r in rating_ranges] + [101], labels=[r[2] for r in rating_ranges], right=False)

# Convert "released" column to datetime type
games["released"] = pd.to_datetime(games["released"])

# Define the season based on release dates
def get_season(date):
    if date.month in (12, 1, 2):
        return "Holiday"
    elif date.month in (3, 4, 5):
        return "Spring"
    elif date.month in (6, 7, 8):
        return "Summer"
    elif date.month in (9, 10):
        return "Fall"
    else:
        return "Early Year"

# Apply the get_season function to the "released" column and create the "season" column
games["season"] = games["released"].apply(get_season)

# Print the first 5 rows with the new "season" column
print(games.head(5))
print("Shape:", games.shape)

# Drop "metacritic" score
games.drop('released', axis=1, inplace=True)

print(games.columns)

# Save the modified DataFrame to a new CSV file
games.to_csv("modified_games.csv", index=False)

print(games.columns)

# Drop "metacritic" score
games.drop('metacritic', axis=1, inplace=True)
# Remove the specified columns
columns_to_remove = ['id', 'background_image']
games.drop(columns_to_remove, axis=1, inplace=True)

```

```{python}
# Calculate the total number of rows per genre
genre_counts = games['genre'].value_counts()

# Display the genre counts
print(genre_counts)


# Create an empty DataFrame to store the randomly selected samples
random_samples = pd.DataFrame()

# Iterate over each genre
for genre in games['genre'].unique():
    # Filter the DataFrame to include only rows with the current genre
    genre_df = games[games['genre'] == genre]
    
    # Randomly select 1000 samples from the current genre
    genre_samples = genre_df.sample(n = 1000, random_state = 89)  # Adjust the random_state if needed
    
    # Append the selected samples to the random_samples DataFrame
    random_samples = pd.concat([random_samples, genre_samples])

# Display the randomly selected samples
print(random_samples)
print(random_samples.head(5))


model_data = random_samples

```


```{python}
gamesDs.columns
```



### Pairplot Visualization

This code block demonstrates the process of selecting specific columns, converting data types, and using Seaborn and Matplotlib libraries to create a pairplot visualization for analyzing the relationships between different variables in the data.

```{python}

```

### Scatter Plot Comparisons

 This code chunk shows a visual analysis of the relationships between the "metacritic" ratings and various features, providing insights into how different factors might impact the overall rating.
```{python}


```

### K-means Clustering and Scatter Plot Matrix

This allows for the exploration and analysis of patterns and relationships within the data, helping to identify similarities or differences among different clusters.

```{python}

```

### K-modes Clustering and Cluster Distribution Visualization

K-modes clustering allows for visualizing the distribution of clusters for each categorical feature. It provides insights into how the categorical variables are grouped into different clusters and allows for the exploration and analysis of patterns and relationships within the data.

```{python}


```